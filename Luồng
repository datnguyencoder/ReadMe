# Phân tích chi tiết và chuyên sâu các cơ chế hoạt động

## 1. Cơ chế xác thực JWT

### Cấu trúc JWT
JWT gồm 3 phần: Header, Payload và Signature:
```
header.payload.signature
```

**Header**: Chứa thuật toán mã hóa (HS384 cho access token, HS512 cho refresh token)
```java
JWSHeader header = new JWSHeader(JWSAlgorithm.HS384);
```

**Payload**: Chứa các thông tin (claims) như:
- `sub`: Username (định danh người dùng)
- `authorities`: Quyền hạn
- `exp`: Thời gian hết hạn
- `jti`: JWT ID (định danh duy nhất của token)
- `userId`: ID người dùng
- `email`: Email người dùng

```java
JWTClaimsSet claimsSet = new JWTClaimsSet.Builder()
    .subject(user.getUsername())
    .issueTime(new Date())
    .claim("authorities", authorityNames)
    .claim("email", user.getEmail())
    .claim("userId", user.getId())
    .expirationTime(new Date(Instant.now().plus(30, ChronoUnit.MINUTES).toEpochMilli()))
    .jwtID(UUID.randomUUID().toString())
    .build();
```

**Signature**: Chữ ký số được tạo bằng cách mã hóa header và payload với secret key:
```java
jwsObject.sign(new MACSigner(secretKey));
```

### Quy trình xác thực
1. **Tạo token khi đăng nhập**:
   ```java
   Authentication authentication = authenticationManager.authenticate(
       new UsernamePasswordAuthenticationToken(username, password)
   );
   User user = (User) authentication.getPrincipal();
   String accessToken = jwtService.generateAccessToken(user);
   String refreshToken = jwtService.generateRefreshToken(user);
   ```

2. **Xác thực mỗi request**:
   - Client gửi token trong header `Authorization: Bearer <token>`
   - `SecurityConfig` cấu hình OAuth2 Resource Server để xác thực JWT
   - `JwtDecoder` giải mã token và kiểm tra tính hợp lệ
   - `JwtAuthenticationConverter` chuyển đổi thông tin từ token thành `Authentication` object

3. **Kiểm tra token vô hiệu**:
   ```java
   public boolean verifyToken(String token) throws ParseException, JOSEException {
       // Kiểm tra token có rỗng không
       if(StringUtils.isBlank(token)) {
           return false;
       }
       
       // Parse token
       SignedJWT signedJWT = SignedJWT.parse(token);
       
       // Kiểm tra hết hạn
       if(signedJWT.getJWTClaimsSet().getExpirationTime().before(new Date())) {
           return false;
       }
       
       // Kiểm tra token có trong danh sách vô hiệu không
       Optional<InvalidatedToken> invalidatedToken = 
           invalidatedTokenRepository.findById(signedJWT.getJWTClaimsSet().getJWTID());
       if(invalidatedToken.isPresent()) {
           return false;
       }
       
       // Xác thực chữ ký
       return signedJWT.verify(new MACVerifier(secretKey.getBytes(StandardCharsets.UTF_8)));
   }
   ```

## 2. Cơ chế đăng xuất và vô hiệu hóa token

### Vấn đề với JWT stateless
JWT là stateless, nghĩa là server không lưu trạng thái token. Điều này gây khó khăn khi cần vô hiệu hóa token trước thời hạn (như khi đăng xuất).

### Giải pháp: Token blacklist
Hệ thống sử dụng một "blacklist" (danh sách đen) để lưu các token đã vô hiệu:

1. **Cấu trúc bảng `invalid_tokens`**:
   ```java
   @Entity
   @Table(name = "invalid_tokens")
   public class InvalidatedToken {
       @Id
       private String id;  // JWT ID (jti)
       
       @Column(nullable = false, columnDefinition = "TEXT")
       private String token;  // Token gốc
       
       private Date expirationTime;  // Thời gian hết hạn
   }
   ```

2. **Quy trình đăng xuất**:
   ```java
   public void logout(LogoutRequest request) throws ParseException {
       // Parse token
       SignedJWT signedJWT = SignedJWT.parse(request.getAccessToken());
       
       // Tạo đối tượng InvalidatedToken
       InvalidatedToken invalidatedToken = InvalidatedToken.builder()
               .id(signedJWT.getJWTClaimsSet().getJWTID())  // Dùng JWT ID làm khóa chính
               .token(request.getAccessToken())
               .expirationTime(signedJWT.getJWTClaimsSet().getExpirationTime())
               .build();
               
       // Lưu vào database
       invalidatedTokenRepository.save(invalidatedToken);
   }
   ```

3. **Tối ưu hóa**:
   - Sử dụng JWT ID (`jti`) làm khóa chính giúp tìm kiếm nhanh
   - Lưu `expirationTime` để có thể xóa token hết hạn khỏi database
   - Cần có cron job định kỳ xóa token hết hạn để tránh database phình to

## 3. Phân tích cơ chế phân quyền

### Cấu hình phân quyền URL
```java
http
    .authorizeHttpRequests(auth ->
        auth.requestMatchers(WHITE_LIST).permitAll()
            .requestMatchers(ADMIN_ENDPOINTS).hasAuthority("ROLE_ADMIN")
            .requestMatchers(MANAGER_ENDPOINTS).hasAnyAuthority("ROLE_ADMIN", "ROLE_MANAGER")
            .anyRequest().authenticated()
    )
```

**Phân tích**:
- `WHITE_LIST`: Danh sách các URL công khai, không cần xác thực
- `ADMIN_ENDPOINTS`: Chỉ ADMIN mới truy cập được
- `MANAGER_ENDPOINTS`: ADMIN hoặc MANAGER mới truy cập được
- `anyRequest().authenticated()`: Các URL khác yêu cầu xác thực (có thể là bất kỳ role nào)

### Method Security
```java
@EnableMethodSecurity
```

Cho phép sử dụng các annotation bảo mật ở cấp độ phương thức:
```java
@PreAuthorize("hasRole('ADMIN')")
public void adminOnlyMethod() { ... }

@PreAuthorize("hasAnyRole('ADMIN', 'MANAGER')")
public void managerMethod() { ... }

@PostAuthorize("returnObject.username == authentication.name")
public User getUser() { ... }
```

### Chuyển đổi JWT sang GrantedAuthorities
```java
public JwtAuthenticationConverter jwtAuthenticationConverter() {
    JwtGrantedAuthoritiesConverter grantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();
    grantedAuthoritiesConverter.setAuthoritiesClaimName("authorities");
    grantedAuthoritiesConverter.setAuthorityPrefix("");
    
    JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();
    jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(grantedAuthoritiesConverter);
    return jwtAuthenticationConverter;
}
```

**Phân tích**:
- `setAuthoritiesClaimName("authorities")`: Lấy quyền hạn từ trường "authorities" trong JWT
- `setAuthorityPrefix("")`: Không thêm tiền tố vào tên quyền hạn
- Spring Security sẽ dùng thông tin này để kiểm tra phân quyền

## 4. Phân tích sâu quy trình đặt lịch hẹn

### Mô hình dữ liệu
```
Consultant (1) --- (*) Slot (1) --- (0..1) Appointment
```

- Mỗi tư vấn viên có nhiều slot
- Mỗi slot có thể có hoặc không có appointment
- Mỗi appointment liên kết với một user (người đặt)

### Quy trình đặt lịch chi tiết
1. **Kiểm tra slot trống**:
   ```java
   public AppointmentResponseDto createAppointment(AppointmentRequestDto requestDto) {
       // Tìm slot theo ID
       Slot slot = slotRepository.findById(requestDto.getSlotId())
           .orElseThrow(() -> new ResourceNotFoundException("Slot not found"));
       
       // Kiểm tra slot đã được đặt chưa
       if (slot.getAppointment() != null) {
           throw new IllegalStateException("Slot already booked");
       }
       
       // Kiểm tra slot trong tương lai
       if (slot.getStartTime().isBefore(LocalDateTime.now())) {
           throw new IllegalStateException("Cannot book past slots");
       }
       
       // Tiếp tục xử lý...
   }
   ```

2. **Tạo appointment**:
   ```java
   // Tạo appointment mới
   Appointment appointment = new Appointment();
   appointment.setUser(user);
   appointment.setSlot(slot);
   appointment.setStatus(ApprovalStatus.PENDING);
   appointment.setNotes(requestDto.getNotes());
   appointment.setCreatedAt(LocalDateTime.now());
   
   // Liên kết slot với appointment
   slot.setAppointment(appointment);
   
   // Lưu vào database
   appointmentRepository.save(appointment);
   slotRepository.save(slot);
   ```

3. **Gửi email thông báo**:
   ```java
   // Gửi email xác nhận cho người đặt
   Map<String, Object> templateModel = new HashMap<>();
   templateModel.put("userName", user.getFullName());
   templateModel.put("consultantName", slot.getConsultant().getUser().getFullName());
   templateModel.put("appointmentDate", slot.getStartTime().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
   templateModel.put("appointmentTime", slot.getStartTime().format(DateTimeFormatter.ofPattern("HH:mm")));
   
   emailService.sendEmailWithTemplate(
       user.getEmail(),
       "Xác nhận đặt lịch tư vấn",
       "appointment-confirmation",
       templateModel
   );
   ```

4. **Cập nhật trạng thái appointment**:
   ```java
   public AppointmentResponseDto updateAppointmentStatus(Long id, ApprovalStatus status) {
       Appointment appointment = appointmentRepository.findById(id)
           .orElseThrow(() -> new ResourceNotFoundException("Appointment not found"));
       
       // Kiểm tra logic nghiệp vụ
       if (appointment.getStatus() == ApprovalStatus.CANCELED) {
           throw new IllegalStateException("Cannot update canceled appointment");
       }
       
       // Cập nhật trạng thái
       appointment.setStatus(status);
       appointment.setUpdatedAt(LocalDateTime.now());
       appointmentRepository.save(appointment);
       
       // Gửi email thông báo
       sendStatusUpdateEmail(appointment);
       
       return mapToResponseDto(appointment);
   }
   ```

## 5. Phân tích sâu cơ chế refresh token

### Quy trình refresh token
1. **Client gửi refresh token**:
   ```java
   @PostMapping("/refresh-token")
   public ResponseEntity<RefreshTokenResponse> refreshToken(@RequestBody RefreshTokenRequest request)
   ```

2. **Kiểm tra tính hợp lệ**:
   ```java
   public RefreshTokenResponse refreshToken(RefreshTokenRequest request) throws ParseException {
       // Kiểm tra token rỗng
       if(StringUtils.isBlank(request.getRefreshToken()))
           throw new RuntimeException("Token cannot be blank");
       
       // Parse token
       SignedJWT signedJWT = SignedJWT.parse(request.getRefreshToken());
       
       // Kiểm tra hết hạn
       if(signedJWT.getJWTClaimsSet().getExpirationTime().before(new Date()))
           throw new RuntimeException("Token expired time");
       
       // Kiểm tra token có trong danh sách vô hiệu không
       Optional<InvalidatedToken> invalidatedToken = 
           invalidatedTokenRepository.findById(signedJWT.getJWTClaimsSet().getJWTID());
       if(invalidatedToken.isPresent())
           throw new RuntimeException("Token expired time");
       
       // Tiếp tục xử lý...
   }
   ```

3. **Tạo access token mới**:
   ```java
   // Lấy username từ refresh token
   String username = signedJWT.getJWTClaimsSet().getSubject();
   
   // Tìm user tương ứng
   User user = userRepository.findByUsername(username)
           .orElseThrow(() -> new RuntimeException("User not found"));
   
   // Tạo access token mới
   String accessToken = jwtService.generateAccessToken(user);
   
   // Trả về cho client
   return RefreshTokenResponse.builder()
           .accessToken(accessToken)
           .build();
   ```

4. **Chiến lược bảo mật**:
   - Refresh token có thời hạn dài hơn access token (14 ngày vs 30 phút)
   - Refresh token chỉ dùng để lấy access token mới, không dùng để truy cập tài nguyên
   - Khi đăng xuất, cả access token và refresh token đều nên bị vô hiệu hóa

## 6. Cơ chế xử lý lỗi và bảo mật

### Custom Authentication Entry Point
```java
@Component
public class CustomAuthenticationEntryPoint implements AuthenticationEntryPoint {
    @Override
    public void commence(HttpServletRequest request, HttpServletResponse response,
                        AuthenticationException authException) throws IOException {
        response.setContentType("application/json;charset=UTF-8");
        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        
        ErrorResponse errorResponse = new ErrorResponse(
            HttpStatus.UNAUTHORIZED.value(),
            "Unauthorized access",
            authException.getMessage()
        );
        
        ObjectMapper mapper = new ObjectMapper();
        response.getWriter().write(mapper.writeValueAsString(errorResponse));
    }
}
```

**Phân tích**:
- Xử lý khi người dùng truy cập tài nguyên không được phép
- Trả về lỗi dạng JSON thay vì trang HTML mặc định
- Cung cấp thông tin lỗi chi tiết cho client

### Global Exception Handler
```java
@RestControllerAdvice
public class GlobalExceptionHandler {
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<ErrorResponse> handleResourceNotFoundException(ResourceNotFoundException ex) {
        ErrorResponse errorResponse = new ErrorResponse(
            HttpStatus.NOT_FOUND.value(),
            "Resource not found",
            ex.getMessage()
        );
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponse);
    }
    
    @ExceptionHandler(BadCredentialsException.class)
    public ResponseEntity<ErrorResponse> handleBadCredentialsException(BadCredentialsException ex) {
        ErrorResponse errorResponse = new ErrorResponse(
            HttpStatus.UNAUTHORIZED.value(),
            "Authentication failed",
            "Invalid username or password"
        );
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(errorResponse);
    }
    
    // Các exception handler khác...
}
```

**Phân tích**:
- Xử lý tập trung các exception trong ứng dụng
- Chuẩn hóa format lỗi trả về cho client
- Che giấu thông tin nhạy cảm trong lỗi (như stack trace)

### CORS Configuration
```java
@Bean
CorsConfigurationSource corsConfigurationSource() {
    CorsConfiguration configuration = new CorsConfiguration();
    configuration.setAllowedOrigins(Arrays.asList("http://localhost:5173"));
    configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"));
    configuration.setAllowedHeaders(List.of("*"));
    configuration.setExposedHeaders(List.of("Authorization"));
    configuration.setAllowCredentials(true);
    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
    source.registerCorsConfiguration("/**", configuration);
    return source;
}
```

**Phân tích**:
- Chỉ cho phép origin cụ thể (`http://localhost:5173`)
- Cho phép các phương thức HTTP cần thiết
- Cho phép truy cập header `Authorization` từ JavaScript
- Cho phép gửi cookie từ client (nếu cần)

## 7. Tối ưu hóa và mở rộng

### Cải thiện hiệu suất
1. **Sử dụng Redis cho token blacklist**:
   - Thay vì lưu trong database, sử dụng Redis với TTL (time-to-live)
   - Token tự động hết hạn và bị xóa khỏi Redis khi hết thời gian
   - Truy vấn nhanh hơn database

2. **Caching thông tin user**:
   - Lưu cache thông tin user để giảm truy vấn database
   - Sử dụng Spring Cache với Redis hoặc Caffeine

### Nâng cao bảo mật
1. **Rotation của JWT secret key**:
   - Định kỳ thay đổi secret key
   - Hỗ trợ nhiều key cùng lúc để chuyển đổi mượt mà

2. **Rate limiting**:
   - Giới hạn số lượng request trong một khoảng thời gian
   - Ngăn chặn brute force attack vào API đăng nhập

3. **Audit logging**:
   - Ghi lại các hoạt động nhạy cảm (đăng nhập, đăng xuất, thay đổi quyền)
   - Phát hiện các hoạt động đáng ngờ

## 8. Luồng dữ liệu đầy đủ

### Đăng nhập và sử dụng hệ thống
```
1. Client gửi username/password → AuthenticationController
2. AuthenticationService xác thực với UserDetailsService
3. Nếu thành công, tạo access token và refresh token
4. Client lưu token và sử dụng cho các request tiếp theo
5. Mỗi request, Spring Security kiểm tra token:
   - Parse token và xác thực chữ ký
   - Kiểm tra token có trong blacklist không
   - Kiểm tra quyền hạn với endpoint được truy cập
6. Khi access token hết hạn:
   - Client gửi refresh token để lấy access token mới
   - Tiếp tục sử dụng hệ thống
7. Khi đăng xuất:
   - Client gửi token để vô hiệu hóa
   - Server lưu token vào blacklist
   - Client xóa token khỏi bộ nhớ
```

Đây là phân tích chi tiết và chuyên sâu về các cơ chế hoạt động trong hệ thống của bạn. Nắm vững những kiến thức này sẽ giúp bạn hiểu rõ cách hệ thống hoạt động, từ đó có thể dễ dàng bảo trì, mở rộng và tối ưu hóa trong tương lai.
