# Phân tích luồng chức năng quản lý dành cho Manager

## 1. Tổng quan Dashboard

**Luồng xử lý:**
1. Client gửi request GET đến `/api/manager/dashboard`
2. `ManagerController` xác thực quyền truy cập (ROLE_MANAGER/ROLE_ADMIN)
3. `ManagerController` gọi `enrollmentService.getDashboardStats()`
4. `CourseEnrollmentService` thực hiện:
   - Tính tổng số enrollment
   - Đếm số chứng chỉ đã cấp (enrollment đã completed)
   - Tính phần trăm người tham gia survey
   - Đếm số lượng reviews đang chờ phê duyệt (blogs + surveys với status PENDING)
   - Tính số enrollment trong năm hiện tại
   - Đếm số người đang học (progress > 0 và chưa completed)
   - Thống kê theo tháng
5. Trả về đối tượng `DashboardResponse` chứa tất cả thông tin thống kê

## 2. Quản lý phê duyệt Blogs

**Luồng xem danh sách blog chờ phê duyệt:**
1. Client gửi request GET đến `/api/manager/blogs/pending`
2. `ManagerController` xác thực quyền truy cập
3. `ManagerController` gọi `blogService.getBlogsByStatus(ApprovalStatus.PENDING)`
4. `BlogServiceImpl` thực hiện:
   - Gọi `blogRepository.findByStatus(ApprovalStatus.PENDING)`
   - Chuyển đổi danh sách Blog thành danh sách BlogResponse
5. Trả về danh sách BlogResponse

**Luồng phê duyệt/từ chối blog:**
1. Client gửi request PATCH đến `/api/manager/blogs/{id}/approval` với body chứa ApprovalRequest
2. `ManagerController` xác thực quyền truy cập
3. `ManagerController` gọi `blogService.updateBlogStatus(id, request.getStatus(), request.getComment())`
4. `BlogServiceImpl` thực hiện:
   - Tìm blog theo id
   - Kiểm tra quyền người dùng
   - Cập nhật trạng thái blog (APPROVED/REJECTED)
   - Lưu vào database
5. Trả về BlogResponse với trạng thái đã cập nhật

## 3. Quản lý phê duyệt Surveys

**Luồng xem danh sách survey chờ phê duyệt:**
1. Client gửi request GET đến `/api/manager/surveys/pending`
2. `ManagerController` xác thực quyền truy cập
3. `ManagerController` gọi `surveyService.getSurveysByStatus(ApprovalStatus.PENDING)`
4. `SurveyServiceImpl` thực hiện:
   - Gọi `surveyRepository.findByStatus(ApprovalStatus.PENDING)`
   - Chuyển đổi danh sách Survey thành danh sách SurveyResponse
5. Trả về danh sách SurveyResponse

**Luồng phê duyệt/từ chối survey:**
1. Client gửi request PATCH đến `/api/manager/surveys/{id}/approval` với body chứa ApprovalRequest
2. `ManagerController` xác thực quyền truy cập
3. `ManagerController` gọi `surveyService.updateSurveyStatus(id, request.getStatus(), request.getComment())`
4. `SurveyServiceImpl` thực hiện:
   - Tìm survey theo id
   - Kiểm tra quyền người dùng
   - Cập nhật trạng thái survey (APPROVED/REJECTED)
   - Nếu từ chối (REJECTED), set active = false
   - Lưu vào database
5. Trả về SurveyResponse với trạng thái đã cập nhật

## 4. Quản lý Topics

**Luồng xem tất cả topics:**
1. Client gửi request GET đến `/api/manager/topics`
2. `ManagerController` xác thực quyền truy cập
3. `ManagerController` gọi `topicService.getAllTopics()`
4. Trả về danh sách TopicResponse

**Luồng tạo mới topic:**
1. Client gửi request POST đến `/api/manager/topics` với body chứa TopicRequest
2. `ManagerController` xác thực quyền truy cập
3. `ManagerController` gọi `topicService.create(topic)`
4. Trả về TopicResponse của topic mới tạo

**Luồng cập nhật topic:**
1. Client gửi request PATCH đến `/api/manager/topics/{id}` với body chứa TopicRequest
2. `ManagerController` xác thực quyền truy cập
3. `ManagerController` gọi `topicService.update(id, topic)`
4. Trả về TopicResponse đã cập nhật

**Luồng xóa topic:**
1. Client gửi request DELETE đến `/api/manager/topics/{id}`
2. `ManagerController` xác thực quyền truy cập
3. `ManagerController` gọi `topicService.delete(id)`
4. Trả về HTTP 204 No Content

## 5. Báo cáo chi tiết

**Luồng báo cáo enrollment:**
1. Client gửi request GET đến `/api/manager/reports/enrollments`
2. `ManagerController` xác thực quyền truy cập
3. `ManagerController` gọi `enrollmentService.generateEnrollmentReport()`
4. `CourseEnrollmentService` thực hiện:
   - Tổng hợp số liệu về enrollment
   - Tìm khóa học phổ biến nhất
   - Tính tỷ lệ hoàn thành
   - Tính thời gian hoàn thành trung bình
5. Trả về Map<String, Object> chứa báo cáo

**Luồng báo cáo survey:**
1. Client gửi request GET đến `/api/manager/reports/surveys`
2. `ManagerController` xác thực quyền truy cập
3. `ManagerController` gọi `surveyService.generateSurveyReport()`
4. `SurveyServiceImpl` thực hiện:
   - Tổng hợp số liệu về survey
   - Tính tỷ lệ phê duyệt
   - Thống kê số người tham gia
   - Thống kê số survey tạo mới trong năm
5. Trả về Map<String, Object> chứa báo cáo

## Cơ chế phân quyền:

Tất cả các endpoint của Manager đều được bảo vệ bằng annotation `@PreAuthorize("hasAnyAuthority('ROLE_MANAGER', 'ROLE_ADMIN')")`, đảm bảo chỉ người dùng có vai trò MANAGER hoặc ADMIN mới có thể truy cập.

Bên cạnh đó, trong các Service còn có kiểm tra quyền bổ sung khi thực hiện các thao tác nhạy cảm như cập nhật trạng thái phê duyệt:
```java
if (currentUser.getRole() != ERole.ROLE_MANAGER && currentUser.getRole() != ERole.ROLE_ADMIN) {
    throw new AccessDeniedException("Chỉ MANAGER và ADMIN mới có thể cập nhật trạng thái");
}
```
